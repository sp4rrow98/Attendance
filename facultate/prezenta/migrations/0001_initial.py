# Generated by Django 4.0.3 on 2022-11-18 06:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profesor', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Facultate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nume', models.CharField(max_length=200, unique=True)),
                ('prescurtare', models.CharField(blank=True, max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Materie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nume_materie', models.CharField(max_length=200)),
                ('metoda_de_predare', models.CharField(choices=[('CURS', 'Curs'), ('SEM', 'Seminar'), ('LAB', 'Laborator')], max_length=4)),
                ('durata_predare', models.IntegerField(default='14')),
                ('in_fiecare', models.IntegerField(blank=True, choices=[(0, 'Luni'), (1, 'Marti'), (2, 'Miercuri'), (3, 'Joi'), (4, 'Vineri')], null=True)),
                ('open', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['nume_materie'],
            },
        ),
        migrations.CreateModel(
            name='Specializare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specializare', models.CharField(max_length=150)),
                ('grupa', models.IntegerField()),
                ('an', models.IntegerField(choices=[(1, 'Intai'), (2, 'Doi'), (3, 'Trei'), (4, 'Patru')])),
                ('specializare_prescurtare', models.CharField(blank=True, max_length=10)),
                ('facultate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prezenta.facultate')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(default='user', max_length=30)),
                ('nume', models.CharField(max_length=100)),
                ('prenume', models.CharField(max_length=100)),
                ('materii', models.ManyToManyField(blank=True, to='prezenta.materie')),
                ('specializare', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prezenta.specializare')),
            ],
        ),
        migrations.CreateModel(
            name='Profesor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nume', models.CharField(max_length=30)),
                ('prenume', models.CharField(max_length=100)),
                ('materii', models.ManyToManyField(blank=True, related_name='materie', to='prezenta.materie')),
            ],
        ),
        migrations.CreateModel(
            name='Prezente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prezenta', models.BooleanField(blank=True, default=True)),
                ('date', models.DateTimeField(default='2022-11-18 06:33:06')),
                ('elev', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='prezenta.student')),
                ('materie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prezenta.materie')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Planificare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zi', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('saptamana', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('an', models.IntegerField(default=2022)),
                ('ora', models.IntegerField(default=8, validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(16)])),
                ('grupa', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='prezenta.specializare')),
                ('profesor', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='prezenta.profesor')),
            ],
        ),
        migrations.CreateModel(
            name='Materii_profesor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('materii', models.ManyToManyField(to='prezenta.materie')),
                ('profesor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prezenta.profesor')),
            ],
        ),
        migrations.AddField(
            model_name='materie',
            name='profesor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='prezenta.profesor'),
        ),
        migrations.AddField(
            model_name='materie',
            name='specializare',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specializari', to='prezenta.specializare'),
        ),
        migrations.CreateModel(
            name='Grades',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('materie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prezenta.materie')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prezenta.student')),
            ],
        ),
        migrations.CreateModel(
            name='Asteptare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_sent', models.DateTimeField(default='2022-11-18 06:33:06')),
                ('materie', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='prezenta.materie')),
                ('profesor', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='prezenta.profesor')),
                ('student', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='prezenta.student')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='materii',
            field=models.ManyToManyField(blank=True, related_name='materii', to='prezenta.materie'),
        ),
        migrations.AddField(
            model_name='user',
            name='specializare',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='prezenta.specializare'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
